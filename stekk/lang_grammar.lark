start : (stmt ";")* stmt?

lvalue_index : (lvalue_index | expr) "#" expr
?lvalue :   name -> lvalue_name
          | lvalue_index

// expressions

NAME : /(?!\d)[a-zA-Z0-9<>+\-*\/~\^&|%?_'=!]+/
name : NAME -> name

at_expr : "@" expr
code_block : "{" (stmt ";")* (stmt|) "}"
const : "$" name
expr_ifelse.1 : "if" expr expr "else" expr
expr_index : (expr_index | expr) "#" expr "#"?
expr_list : "[" expr* "]"
expr_while.1: "while" expr expr
?fcall :   fcall_index
         | fcall_other
fcall_index.1 : "." expr_index
fcall_other.0 : "." expr
range.1 : expr ".." expr // to avoid collision with "expr1 fcall(fcall(expr2)"
stack : "(" expr* ")"
namespace : expr "::" name

?expr :   at_expr
        | code_block
        | const
        | expr_ifelse
        | expr_index
        | expr_list
        | expr_while
        | fcall
        | name
        | namespace
        | number
        | range
        | stack
        | string


// statements

?stmt :   expr
        | stmt_assign

stmt_assign : lvalue ":=" expr

COMMENT: ";" ";" /.*/
%ignore COMMENT

%import common.ESCAPED_STRING
string: ESCAPED_STRING

?number.1 :   SIGNED_INT -> int
            | SIGNED_FLOAT -> float
SIGNED_INT: /[-+]?(0|[1-9][0-9]*)/
SIGNED_FLOAT: /[-+]?(0|[1-9][0-9]*)\.[0-9]+/

%import common.WS
%ignore WS